-- ─────────────────────────────────────────────────────────────────────────────
-- Database
-- ─────────────────────────────────────────────────────────────────────────────
CREATE DATABASE IF NOT EXISTS `honeybadgerdb`
  CHARACTER SET utf8mb4
  COLLATE utf8mb4_unicode_ci;
USE `honeybadgerdb`;

SET NAMES utf8mb4;

-- ─────────────────────────────────────────────────────────────────────────────
-- ASP.NET Core Identity (MySQL-friendly)
-- ─────────────────────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `AspNetRoles` (
  `Id`               VARCHAR(255) NOT NULL,
  `Name`             VARCHAR(256),
  `NormalizedName`   VARCHAR(256),
  `ConcurrencyStamp` LONGTEXT,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_Role_NormalizedName` (`NormalizedName`)
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AspNetUsers` (
  `Id`                   VARCHAR(255) NOT NULL,
  `UserName`             VARCHAR(256),
  `NormalizedUserName`   VARCHAR(256),
  `Email`                VARCHAR(256),
  `NormalizedEmail`      VARCHAR(256),
  `EmailConfirmed`       TINYINT(1) NOT NULL DEFAULT 0,
  `PasswordHash`         LONGTEXT,
  `SecurityStamp`        LONGTEXT,
  `ConcurrencyStamp`     LONGTEXT,
  `PhoneNumber`          LONGTEXT,
  `PhoneNumberConfirmed` TINYINT(1) NOT NULL DEFAULT 0,
  `TwoFactorEnabled`     TINYINT(1) NOT NULL DEFAULT 0,
  `LockoutEnd`           DATETIME(6),
  `LockoutEnabled`       TINYINT(1) NOT NULL DEFAULT 1,
  `AccessFailedCount`    INT NOT NULL DEFAULT 0,
  `CreatedAt`            DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`            DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_User_NormalizedUserName` (`NormalizedUserName`),
  KEY `IX_User_NormalizedEmail` (`NormalizedEmail`)
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AspNetRoleClaims` (
  `Id`         INT NOT NULL AUTO_INCREMENT,
  `RoleId`     VARCHAR(255) NOT NULL,
  `ClaimType`  LONGTEXT,
  `ClaimValue` LONGTEXT,
  PRIMARY KEY (`Id`),
  KEY `IX_RoleClaims_RoleId` (`RoleId`),
  CONSTRAINT `FK_RoleClaims_Roles`
    FOREIGN KEY (`RoleId`) REFERENCES `AspNetRoles`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AspNetUserClaims` (
  `Id`         INT NOT NULL AUTO_INCREMENT,
  `UserId`     VARCHAR(255) NOT NULL,
  `ClaimType`  LONGTEXT,
  `ClaimValue` LONGTEXT,
  PRIMARY KEY (`Id`),
  KEY `IX_UserClaims_UserId` (`UserId`),
  CONSTRAINT `FK_UserClaims_Users`
    FOREIGN KEY (`UserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AspNetUserLogins` (
  `LoginProvider`       VARCHAR(128) NOT NULL,
  `ProviderKey`         VARCHAR(128) NOT NULL,
  `ProviderDisplayName` LONGTEXT,
  `UserId`              VARCHAR(255) NOT NULL,
  PRIMARY KEY (`LoginProvider`, `ProviderKey`),
  KEY `IX_UserLogins_UserId` (`UserId`),
  CONSTRAINT `FK_UserLogins_Users`
    FOREIGN KEY (`UserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AspNetUserRoles` (
  `UserId` VARCHAR(255) NOT NULL,
  `RoleId` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`UserId`, `RoleId`),
  KEY `IX_UserRoles_RoleId` (`RoleId`),
  CONSTRAINT `FK_UserRoles_Users`
    FOREIGN KEY (`UserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE CASCADE,
  CONSTRAINT `FK_UserRoles_Roles`
    FOREIGN KEY (`RoleId`) REFERENCES `AspNetRoles`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AspNetUserTokens` (
  `UserId`        VARCHAR(255) NOT NULL,
  `LoginProvider` VARCHAR(128) NOT NULL,
  `Name`          VARCHAR(128) NOT NULL,
  `Value`         LONGTEXT,
  PRIMARY KEY (`UserId`, `LoginProvider`, `Name`),
  CONSTRAINT `FK_UserTokens_Users`
    FOREIGN KEY (`UserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- Optional seed
INSERT IGNORE INTO `AspNetRoles` (`Id`, `Name`, `NormalizedName`, `ConcurrencyStamp`)
VALUES ('role-admin', 'Admin', 'ADMIN', UUID());




-- ─────────────────────────────────────────────────────────────────────────────
-- Projects / Portfolio
-- ─────────────────────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `Projects` (
  `Id`          BIGINT NOT NULL AUTO_INCREMENT,
  `Slug`        VARCHAR(150) NOT NULL,
  `Title`       VARCHAR(200) NOT NULL,
  `Summary`     VARCHAR(500),
  `Description` LONGTEXT,
  `TechStack`   JSON NULL,
  `LiveUrl`     VARCHAR(500),
  `RepoUrl`     VARCHAR(500),
  `Featured`    TINYINT(1) NOT NULL DEFAULT 0,
  `Published`   TINYINT(1) NOT NULL DEFAULT 1,
  `OwnerUserId` VARCHAR(255) NULL,
  `CreatedAt`   DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`   DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`),
  UNIQUE KEY `UX_Projects_Slug` (`Slug`),
  KEY `IX_Projects_Published` (`Published`),
  KEY `IX_Projects_OwnerUserId` (`OwnerUserId`),
  CONSTRAINT `FK_Projects_Owner`
    FOREIGN KEY (`OwnerUserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE SET NULL
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `ProjectImages` (
  `Id`        BIGINT NOT NULL AUTO_INCREMENT,
  `ProjectId` BIGINT NOT NULL,
  `Url`       VARCHAR(500) NOT NULL,
  `Alt`       VARCHAR(200),
  `SortOrder` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`Id`),
  KEY `IX_ProjectImages_Project` (`ProjectId`),
  CONSTRAINT `FK_ProjectImages_Project`
    FOREIGN KEY (`ProjectId`) REFERENCES `Projects`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- ─────────────────────────────────────────────────────────────────────────────
-- Blog
-- ─────────────────────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `BlogPosts` (
  `Id`           BIGINT NOT NULL AUTO_INCREMENT,
  `Slug`         VARCHAR(150) NOT NULL,
  `Title`        VARCHAR(250) NOT NULL,
  `Excerpt`      VARCHAR(500),
  `Content`      LONGTEXT NOT NULL,
  `CoverImageUrl` VARCHAR(500),
  `Status`       ENUM('draft','published','archived') NOT NULL DEFAULT 'draft',
  `PublishedAt`  DATETIME(6) NULL,
  `AuthorUserId` VARCHAR(255) NULL,
  `CreatedAt`    DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`    DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`),
  UNIQUE KEY `UX_Blog_Slug` (`Slug`),
  KEY `IX_Blog_Status` (`Status`),
  KEY `IX_Blog_AuthorUserId` (`AuthorUserId`),
  CONSTRAINT `FK_Blog_Author`
    FOREIGN KEY (`AuthorUserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE SET NULL
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `BlogTags` (
  `Id`   BIGINT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(100) NOT NULL,
  `Slug` VARCHAR(120) NOT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `UX_BlogTags_Name` (`Name`),
  UNIQUE KEY `UX_BlogTags_Slug` (`Slug`)
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `BlogPostTags` (
  `BlogPostId` BIGINT NOT NULL,
  `BlogTagId`  BIGINT NOT NULL,
  PRIMARY KEY (`BlogPostId`, `BlogTagId`),
  KEY `IX_BlogPostTags_Tag` (`BlogTagId`),
  CONSTRAINT `FK_BlogPostTags_Post`
    FOREIGN KEY (`BlogPostId`) REFERENCES `BlogPosts`(`Id`) ON DELETE CASCADE,
  CONSTRAINT `FK_BlogPostTags_Tag`
    FOREIGN KEY (`BlogTagId`) REFERENCES `BlogTags`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- ─────────────────────────────────────────────────────────────────────────────
-- Fitness
-- ─────────────────────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `FitnessDaily` (
  `Id`           BIGINT NOT NULL AUTO_INCREMENT,
  `UserId`       VARCHAR(255) NOT NULL,
  `Day`          DATE NOT NULL,
  `CaloriesIn`   INT,
  `CaloriesOut`  INT,
  `Steps`        INT,
  `SleepMinutes` INT,
  `WeightKg`     DECIMAL(5,2),
  `Notes`        VARCHAR(500),
  `CreatedAt`    DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`    DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`),
  UNIQUE KEY `UX_FitnessDaily_User_Day` (`UserId`, `Day`),
  KEY `IX_FitnessDaily_UserId` (`UserId`),
  CONSTRAINT `FK_FitnessDaily_User`
    FOREIGN KEY (`UserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `ExerciseSessions` (
  `Id`             BIGINT NOT NULL AUTO_INCREMENT,
  `UserId`         VARCHAR(255) NOT NULL,
  `StartTime`      DATETIME(6) NOT NULL,
  `EndTime`        DATETIME(6) NULL,
  `Type`           ENUM('cardio','strength','mobility','other') NOT NULL,
  `CaloriesBurned` INT,
  `DistanceKm`     DECIMAL(6,2) NULL,
  `Notes`          VARCHAR(500),
  `CreatedAt`      DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`      DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`),
  KEY `IX_Exercise_User_Start` (`UserId`, `StartTime`),
  CONSTRAINT `FK_Exercise_User`
    FOREIGN KEY (`UserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- ─────────────────────────────────────────────────────────────────────────────
-- Contact / Business Inquiries
-- ─────────────────────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `ContactInquiries` (
  `Id`              BIGINT NOT NULL AUTO_INCREMENT,
  `Name`            VARCHAR(200),
  `Email`           VARCHAR(256) NOT NULL,
  `Phone`           VARCHAR(50),
  `Subject`         VARCHAR(200),
  `Message`         LONGTEXT NOT NULL,
  `Status`          ENUM('new','replied','closed') NOT NULL DEFAULT 'new',
  `CreatedAt`       DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`       DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  `HandledByUserId` VARCHAR(255) NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_Inquiries_Status` (`Status`),
  KEY `IX_Inquiries_Handler` (`HandledByUserId`),
  CONSTRAINT `FK_Inquiries_Handler`
    FOREIGN KEY (`HandledByUserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE SET NULL
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- ─────────────────────────────────────────────────────────────────────────────
-- Views
-- ─────────────────────────────────────────────────────────────────────────────
DROP VIEW IF EXISTS `v_user_is_admin`;
CREATE VIEW `v_user_is_admin` AS
SELECT
  u.`Id` AS `UserId`,
  EXISTS (
    SELECT 1
    FROM `AspNetUserRoles` ur
    JOIN `AspNetRoles` r ON r.`Id` = ur.`RoleId`
    WHERE ur.`UserId` = u.`Id` AND r.`NormalizedName` = 'ADMIN'
  ) AS `IsAdmin`
FROM `AspNetUsers` u;
-- ─────────────────────────────────────────────────────────────────────────────
-- Animations: Groups + Items
-- ─────────────────────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `AnimationGroups` (
  `Id`              BIGINT NOT NULL AUTO_INCREMENT,
  `Slug`            VARCHAR(150) NOT NULL,
  `Title`           VARCHAR(200) NOT NULL,
  `Description`     VARCHAR(1000) NULL,
  `TagsJson`        JSON NULL,
  `Published`       TINYINT(1) NOT NULL DEFAULT 0,
  `AuthorUserId`    VARCHAR(255) NULL,
  `CreatedAt`       DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`       DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`),
  UNIQUE KEY `UX_AnimGroups_Slug` (`Slug`),
  KEY `IX_AnimGroups_Published` (`Published`),
  KEY `IX_AnimGroups_Author` (`AuthorUserId`),
  CONSTRAINT `FK_AnimGroups_Author`
    FOREIGN KEY (`AuthorUserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE SET NULL
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AnimationGroupItems` (
  `Id`         BIGINT NOT NULL AUTO_INCREMENT,
  `GroupId`    BIGINT NOT NULL,
  `FileName`   VARCHAR(300) NOT NULL,  -- e.g. "Breakdance_Start.glb" (relative to ANIM_DIR)
  `Label`      VARCHAR(50) NULL,       -- e.g. "Start" | "Middle" | "End"
  `SortOrder`  INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`Id`),
  KEY `IX_AnimGroupItems_Group_Sort` (`GroupId`, `SortOrder`),
  CONSTRAINT `FK_AnimGroupItems_Group`
    FOREIGN KEY (`GroupId`) REFERENCES `AnimationGroups`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;
  
  ALTER TABLE `Projects`
  ADD COLUMN `Kind` ENUM('software','hardware') NOT NULL DEFAULT 'software',
  ADD INDEX `IX_Projects_Kind` (`Kind`);
  
  
  

-- params
SET @email := 'matic.ozimic@gmail.com';

-- find user by NormalizedEmail (Identity stores UPPER)
SET @uid := (
  SELECT Id
  FROM AspNetUsers
  WHERE NormalizedEmail COLLATE utf8mb4_unicode_ci
        = UPPER(CONVERT(@email USING utf8mb4)) COLLATE utf8mb4_unicode_ci
  LIMIT 1
);

-- if NULL, register first via POST /api/auth/register, then rerun this block
SELECT @uid AS UserId;

-- ensure Admin role exists (idempotent)
INSERT IGNORE INTO AspNetRoles (Id, Name, NormalizedName, ConcurrencyStamp)
SELECT 'role-admin', 'Admin', 'ADMIN', UUID()
WHERE NOT EXISTS (
  SELECT 1 FROM AspNetRoles
  WHERE NormalizedName COLLATE utf8mb4_unicode_ci = 'ADMIN'
);

-- get Admin role id
SET @rid := (
  SELECT Id FROM AspNetRoles
  WHERE NormalizedName COLLATE utf8mb4_unicode_ci = 'ADMIN'
  LIMIT 1
);

-- grant Admin to the user (idempotent)
INSERT IGNORE INTO AspNetUserRoles (UserId, RoleId)
SELECT @uid, @rid
FROM DUAL
WHERE @uid IS NOT NULL AND @rid IS NOT NULL;

-- verify
SELECT * FROM v_user_is_admin WHERE UserId = @uid;

ALTER TABLE `FitnessDaily`
  ADD COLUMN `DistanceKm` DECIMAL(6,2) NULL AFTER `Steps`;

select * from aspnetusers;


CREATE TABLE IF NOT EXISTS `RequestLogs` (
  `Id` BIGINT NOT NULL AUTO_INCREMENT,
  `StartedUtc` DATETIME(6) NOT NULL,
  `DurationMs` INT NOT NULL,
  `Method` VARCHAR(16) NOT NULL,
  `Path` VARCHAR(1024) NOT NULL,
  `Query` LONGTEXT NULL,
  `StatusCode` INT NOT NULL,
  `UserId` VARCHAR(255) NULL,
  `Email` VARCHAR(256) NULL,
  `Ip` VARCHAR(64) NOT NULL,
  `Country` VARCHAR(64) NULL,
  `Asn` VARCHAR(32) NULL,
  `UserAgent` VARCHAR(1024) NULL,
  `UaFamily` VARCHAR(64) NULL,
  `IsBot` TINYINT(1) NOT NULL DEFAULT 0,
  `Referrer` VARCHAR(1024) NULL,
  `Protocol` VARCHAR(16) NULL,
  `TlsProtocol` VARCHAR(32) NULL,
  `TlsCipher` VARCHAR(64) NULL,
  `ResponseBytes` BIGINT NULL,
  `Blocked` TINYINT(1) NOT NULL DEFAULT 0,
  `BlockReason` VARCHAR(100) NULL,
  `WafFlagsJson` LONGTEXT NULL,
  `ExtraJson` LONGTEXT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_RequestLogs_StartedUtc` (`StartedUtc`),
  /* ↓ Use a prefix index on Path to stay within byte limits */
  KEY `IX_RequestLogs_Path_StartedUtc` (`Path`(191), `StartedUtc`),
  KEY `IX_RequestLogs_Ip_StartedUtc` (`Ip`, `StartedUtc`),
  KEY `IX_RequestLogs_StatusCode` (`StatusCode`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


CREATE TABLE IF NOT EXISTS `DailyTopIps` (
  `Id` BIGINT NOT NULL AUTO_INCREMENT,
  `Day` DATE NOT NULL,
  `Ip` VARCHAR(64) NOT NULL,
  `Count` INT NOT NULL,
  `Rank` INT NOT NULL,
  `Country` VARCHAR(64) NULL,
  `Asn` VARCHAR(32) NULL,
  `CreatedUtc` DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`),
  UNIQUE KEY `UX_DailyTopIps_Day_Rank` (`Day`, `Rank`),
  KEY `IX_DailyTopIps_Day_Ip` (`Day`, `Ip`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `LoginSessions` (
  `Id` BIGINT NOT NULL AUTO_INCREMENT,
  `UserId` VARCHAR(255) NOT NULL,
  `Email` VARCHAR(256) NULL,
  `Ip` VARCHAR(64) NOT NULL,
  `UserAgent` VARCHAR(512) NULL,
  `CreatedUtc` DATETIME(6) NOT NULL,
  `LastSeenUtc` DATETIME(6) NOT NULL,
  `JwtId` VARCHAR(64) NULL,
  `Revoked` TINYINT(1) NOT NULL DEFAULT 0,
  `RevokedUtc` DATETIME(6) NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_LoginSessions_UserId_CreatedUtc` (`UserId`, `CreatedUtc`),
  KEY `IX_LoginSessions_Email` (`Email`),
  CONSTRAINT `FK_LoginSessions_AspNetUsers`
    FOREIGN KEY (`UserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `IpBans` (
  `Id` BIGINT NOT NULL AUTO_INCREMENT,
  `Value` VARCHAR(255) NOT NULL,      -- IP or CIDR
  `Kind` VARCHAR(32) NOT NULL DEFAULT 'ip', -- ip|cidr|user|asn|country
  `Reason` VARCHAR(500) NULL,
  `CreatedUtc` DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `ExpiresUtc` DATETIME(6) NULL,
  `Disabled` TINYINT(1) NOT NULL DEFAULT 0,
  `CreatedByUserId` VARCHAR(255) NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_IpBans_Kind_Value` (`Kind`, `Value`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `MetricSnapshots` (
  `Id` BIGINT NOT NULL AUTO_INCREMENT,
  `WindowStartUtc` DATETIME(6) NOT NULL,
  `WindowEndUtc` DATETIME(6) NOT NULL,
  `Requests` INT NOT NULL,
  `P50Ms` DOUBLE NOT NULL,
  `P95Ms` DOUBLE NOT NULL,
  `P99Ms` DOUBLE NOT NULL,
  `UniqueIps` INT NOT NULL,
  `Errors4xx` INT NOT NULL,
  `Errors5xx` INT NOT NULL,
  `StatusCountsJson` LONGTEXT NULL,
  `CountrySplitJson` LONGTEXT NULL,
  `UaBotHistogramJson` LONGTEXT NULL,
  `Notes` LONGTEXT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_MetricSnapshots_WindowStartUtc` (`WindowStartUtc`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


ALTER TABLE `AnimationGroups`
  ADD COLUMN `Category` VARCHAR(64) NOT NULL DEFAULT 'misc' AFTER `Published`,
  ADD COLUMN `IsDefaultForCategory` TINYINT(1) NOT NULL DEFAULT 0 AFTER `Category`;

CREATE INDEX `IX_AnimationGroups_Category_Published`
  ON `AnimationGroups` (`Category`, `Published`);

CREATE INDEX `IX_AnimationGroups_Category_IsDefaultForCategory`
  ON `AnimationGroups` (`Category`, `IsDefaultForCategory`);


SELECT COUNT(*) FROM FitnessDaily WHERE UserId = ':uid';

delete from fitnessdaily;

select * from fitnessdaily where steps = 4521;
select count(*)  from fitnessdaily where IsSynthetic = 1;
select count(*)  from fitnessdaily where IsSynthetic = 0;


select * from fitnessdaily where steps < 1000;
select * from fitnessdaily;
select * from aspnetusers;

select *  from animationgroups;
delete from animationgroups where id =9;
delete from animationgroups;
delete from animationgroupitems;

DELIMITER $$

-- BEFORE INSERT: boost low steps and compute DistanceKm via polynomial
DROP TRIGGER IF EXISTS tr_fitnessdaily_boost_steps_bi $$
CREATE TRIGGER tr_fitnessdaily_boost_steps_bi
BEFORE INSERT ON FitnessDaily
FOR EACH ROW
BEGIN
  DECLARE base_steps INT DEFAULT IFNULL(NEW.Steps, 0);
  DECLARE add_total  INT;
  DECLARE km DOUBLE;

  IF base_steps < 3000 THEN
    -- 6000 + random(1000..2000)
    SET add_total = 6000 + FLOOR(1000 + (RAND() * 1001));
    SET NEW.Steps = base_steps + add_total;
  END IF;

  -- DistanceKm using personalized quadratic:
  -- km = 0.129091492 + 0.000589979242 * steps + 2.45535812e-08 * steps^2
  IF NEW.Steps IS NULL THEN
    SET NEW.DistanceKm = NULL;
  ELSE
    SET km = 0.129091492
             + 0.000589979242 * NEW.Steps
             + 0.0000000245535812 * NEW.Steps * NEW.Steps;
    SET NEW.DistanceKm = ROUND(GREATEST(0, km), 2);
  END IF;
END$$


-- BEFORE UPDATE: enforce the same rule; guard against double-boosting
DROP TRIGGER IF EXISTS tr_fitnessdaily_boost_steps_bu $$
CREATE TRIGGER tr_fitnessdaily_boost_steps_bu
BEFORE UPDATE ON FitnessDaily
FOR EACH ROW
BEGIN
  DECLARE base_steps INT DEFAULT IFNULL(NEW.Steps, 0);
  DECLARE add_total  INT;
  DECLARE km DOUBLE;

  -- Only boost if still <3000 and the caller didn't already change it this turn
  IF base_steps < 3000 AND (OLD.Steps IS NULL OR NEW.Steps = OLD.Steps) THEN
    SET add_total = 6000 + FLOOR(1000 + (RAND() * 1001));
    SET NEW.Steps = base_steps + add_total;
  END IF;

  -- Recompute DistanceKm from final NEW.Steps via the polynomial
  IF NEW.Steps IS NULL THEN
    SET NEW.DistanceKm = NULL;
  ELSE
    SET km = 0.129091492
             + 0.000589979242 * NEW.Steps
             + 0.0000000245535812 * NEW.Steps * NEW.Steps;
    SET NEW.DistanceKm = ROUND(GREATEST(0, km), 2);
  END IF;
END$$



-- NEW: compute CaloriesOut from Steps (runs after your step-boost trigger)
DROP TRIGGER IF EXISTS tr_fitnessdaily_calories_bi $$
CREATE TRIGGER tr_fitnessdaily_calories_bi
BEFORE INSERT ON FitnessDaily
FOR EACH ROW
FOLLOWS tr_fitnessdaily_boost_steps_bi
BEGIN
  -- Simple, robust per-step model from your samples:
  -- calories ≈ 0.04 × steps  (≈ 4 kcal per 100 steps)
  -- Clamp to 0 and round to nearest integer.
  IF NEW.Steps IS NULL OR NEW.Steps <= 0 THEN
    SET NEW.CaloriesOut = NULL;
  ELSE
    SET NEW.CaloriesOut = CAST(ROUND(GREATEST(0, 0.04 * NEW.Steps)) AS SIGNED);
  END IF;
END$$

-- Keep CaloriesOut in sync on updates as well (runs after your boost-on-update trigger)
DROP TRIGGER IF EXISTS tr_fitnessdaily_calories_bu $$
CREATE TRIGGER tr_fitnessdaily_calories_bu
BEFORE UPDATE ON FitnessDaily
FOR EACH ROW
FOLLOWS tr_fitnessdaily_boost_steps_bu
BEGIN
  IF NEW.Steps IS NULL OR NEW.Steps <= 0 THEN
    SET NEW.CaloriesOut = NULL;
  ELSE
    SET NEW.CaloriesOut = CAST(ROUND(GREATEST(0, 0.04 * NEW.Steps)) AS SIGNED);
  END IF;
END$$


DELIMITER ;
/* ─────────────────────────────────────────────────────────────────────────────
   FitnessDaily triggers: boost low steps and keep DistanceKm in sync
   Rule: if Steps < 3000 (or NULL), add 6000 + random(1000..2000)
         DistanceKm := ROUND(Steps * 0.0007495, 2)
   ───────────────────────────────────────────────────────────────────────────── */

-- ─────────────────────────────────────────────────────────────────────────────
-- Badger / Stage Settings (single-row live config + optional extra profiles)
-- ─────────────────────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `BadgerSettings` (
  `Id`             INT         NOT NULL,         -- 1 = current/live settings; other Ids may be saved profiles
  -- Positions
  `OffsetY`        INT         NOT NULL DEFAULT 0,
  `SaucerOffsetY`  INT         NOT NULL DEFAULT 0,
  -- Lighting
  `LightYaw`       INT         NOT NULL DEFAULT 0,
  `LightHeight`    INT         NOT NULL DEFAULT 120,
  `LightDist`      INT         NOT NULL DEFAULT 200,
  -- Admin-chosen zooms (saved manually)
  `ModelZoom`      DOUBLE      NOT NULL DEFAULT 1.0,
  `SaucerZoom`     DOUBLE      NOT NULL DEFAULT 1.0,
  `CameraZoom`     DOUBLE      NOT NULL DEFAULT 1.0,
  -- Timestamps
  `UpdatedUtc`     DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- Seed the live row (Id=1) if it doesn't exist yet
INSERT INTO `BadgerSettings` (`Id`, `OffsetY`, `SaucerOffsetY`, `LightYaw`, `LightHeight`, `LightDist`,
                              `ModelZoom`, `SaucerZoom`, `CameraZoom`)
SELECT 1, 0, 0, 0, 120, 200, 1.0, 1.0, 1.0
WHERE NOT EXISTS (SELECT 1 FROM `BadgerSettings` WHERE `Id` = 1);

-- Optional: history/audit of changes to settings (no app changes needed)
CREATE TABLE IF NOT EXISTS `BadgerSettingsHistory` (
  `Id`             BIGINT      NOT NULL AUTO_INCREMENT,
  `SettingsId`     INT         NOT NULL,         -- matches BadgerSettings.Id (usually 1)
  `ChangedUtc`     DATETIME(6) NOT NULL,
  `ChangedBy`      VARCHAR(255) NULL,            -- DB user or app-level user if you wire it in later
  `OffsetY`        INT         NOT NULL,
  `SaucerOffsetY`  INT         NOT NULL,
  `LightYaw`       INT         NOT NULL,
  `LightHeight`    INT         NOT NULL,
  `LightDist`      INT         NOT NULL,
  `ModelZoom`      DOUBLE      NOT NULL,
  `SaucerZoom`     DOUBLE      NOT NULL,
  `CameraZoom`     DOUBLE      NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_BadgerSettingsHistory_Settings_Changed` (`SettingsId`, `ChangedUtc`),
  CONSTRAINT `FK_BadgerSettingsHistory_Settings`
    FOREIGN KEY (`SettingsId`) REFERENCES `BadgerSettings`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

DELIMITER $$

-- Audit on INSERT (initial creation or when you add more profiles)
DROP TRIGGER IF EXISTS `tr_badger_settings_ai` $$
CREATE TRIGGER `tr_badger_settings_ai`
AFTER INSERT ON `BadgerSettings`
FOR EACH ROW
BEGIN
  INSERT INTO `BadgerSettingsHistory`
  (`SettingsId`, `ChangedUtc`, `ChangedBy`,
   `OffsetY`, `SaucerOffsetY`, `LightYaw`, `LightHeight`, `LightDist`,
   `ModelZoom`, `SaucerZoom`, `CameraZoom`)
  VALUES
  (NEW.`Id`, NOW(6), CURRENT_USER(),
   NEW.`OffsetY`, NEW.`SaucerOffsetY`, NEW.`LightYaw`, NEW.`LightHeight`, NEW.`LightDist`,
   NEW.`ModelZoom`, NEW.`SaucerZoom`, NEW.`CameraZoom`);
END$$

-- Audit on UPDATE (every save from the admin UI/controller)
DROP TRIGGER IF EXISTS `tr_badger_settings_au` $$
CREATE TRIGGER `tr_badger_settings_au`
AFTER UPDATE ON `BadgerSettings`
FOR EACH ROW
BEGIN
  INSERT INTO `BadgerSettingsHistory`
  (`SettingsId`, `ChangedUtc`, `ChangedBy`,
   `OffsetY`, `SaucerOffsetY`, `LightYaw`, `LightHeight`, `LightDist`,
   `ModelZoom`, `SaucerZoom`, `CameraZoom`)
  VALUES
  (NEW.`Id`, NOW(6), CURRENT_USER(),
   NEW.`OffsetY`, NEW.`SaucerOffsetY`, NEW.`LightYaw`, NEW.`LightHeight`, NEW.`LightDist`,
   NEW.`ModelZoom`, NEW.`SaucerZoom`, NEW.`CameraZoom`);
END$$
DELIMITER ;



-- Clean up any older trigger names you may have used previously
DROP TRIGGER IF EXISTS fitnessdaily_after_insert_boost;
DROP TRIGGER IF EXISTS tr_fitnessdaily_boost_steps_bi;
DROP TRIGGER IF EXISTS tr_fitnessdaily_boost_steps_bu;

-- Optional quick checks:
-- SHOW TRIGGERS LIKE 'FitnessDaily';
