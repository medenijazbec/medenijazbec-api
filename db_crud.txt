-- ─────────────────────────────────────────────────────────────────────────────
-- Database
-- ─────────────────────────────────────────────────────────────────────────────
CREATE DATABASE IF NOT EXISTS `honeybadgerdb`
  CHARACTER SET utf8mb4
  COLLATE utf8mb4_unicode_ci;
USE `honeybadgerdb`;

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ─────────────────────────────────────────────────────────────────────────────
-- Drop existing objects (children first)
-- ─────────────────────────────────────────────────────────────────────────────
DROP VIEW IF EXISTS `v_user_is_admin`;

DROP TABLE IF EXISTS `ProjectImages`;
DROP TABLE IF EXISTS `BlogPostTags`;
DROP TABLE IF EXISTS `BlogTags`;
DROP TABLE IF EXISTS `Projects`;
DROP TABLE IF EXISTS `BlogPosts`;
DROP TABLE IF EXISTS `FitnessDaily`;
DROP TABLE IF EXISTS `ExerciseSessions`;
DROP TABLE IF EXISTS `ContactInquiries`;

DROP TABLE IF EXISTS `AspNetUserTokens`;
DROP TABLE IF EXISTS `AspNetUserLogins`;
DROP TABLE IF EXISTS `AspNetUserRoles`;
DROP TABLE IF EXISTS `AspNetUserClaims`;
DROP TABLE IF EXISTS `AspNetRoleClaims`;
DROP TABLE IF EXISTS `AspNetUsers`;
DROP TABLE IF EXISTS `AspNetRoles`;

SET FOREIGN_KEY_CHECKS = 1;

-- ─────────────────────────────────────────────────────────────────────────────
-- ASP.NET Core Identity (MySQL-friendly)
-- ─────────────────────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `AspNetRoles` (
  `Id`               VARCHAR(255) NOT NULL,
  `Name`             VARCHAR(256),
  `NormalizedName`   VARCHAR(256),
  `ConcurrencyStamp` LONGTEXT,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_Role_NormalizedName` (`NormalizedName`)
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AspNetUsers` (
  `Id`                   VARCHAR(255) NOT NULL,
  `UserName`             VARCHAR(256),
  `NormalizedUserName`   VARCHAR(256),
  `Email`                VARCHAR(256),
  `NormalizedEmail`      VARCHAR(256),
  `EmailConfirmed`       TINYINT(1) NOT NULL DEFAULT 0,
  `PasswordHash`         LONGTEXT,
  `SecurityStamp`        LONGTEXT,
  `ConcurrencyStamp`     LONGTEXT,
  `PhoneNumber`          LONGTEXT,
  `PhoneNumberConfirmed` TINYINT(1) NOT NULL DEFAULT 0,
  `TwoFactorEnabled`     TINYINT(1) NOT NULL DEFAULT 0,
  `LockoutEnd`           DATETIME(6),
  `LockoutEnabled`       TINYINT(1) NOT NULL DEFAULT 1,
  `AccessFailedCount`    INT NOT NULL DEFAULT 0,
  `CreatedAt`            DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`            DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_User_NormalizedUserName` (`NormalizedUserName`),
  KEY `IX_User_NormalizedEmail` (`NormalizedEmail`)
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AspNetRoleClaims` (
  `Id`         INT NOT NULL AUTO_INCREMENT,
  `RoleId`     VARCHAR(255) NOT NULL,
  `ClaimType`  LONGTEXT,
  `ClaimValue` LONGTEXT,
  PRIMARY KEY (`Id`),
  KEY `IX_RoleClaims_RoleId` (`RoleId`),
  CONSTRAINT `FK_RoleClaims_Roles`
    FOREIGN KEY (`RoleId`) REFERENCES `AspNetRoles`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AspNetUserClaims` (
  `Id`         INT NOT NULL AUTO_INCREMENT,
  `UserId`     VARCHAR(255) NOT NULL,
  `ClaimType`  LONGTEXT,
  `ClaimValue` LONGTEXT,
  PRIMARY KEY (`Id`),
  KEY `IX_UserClaims_UserId` (`UserId`),
  CONSTRAINT `FK_UserClaims_Users`
    FOREIGN KEY (`UserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AspNetUserLogins` (
  `LoginProvider`       VARCHAR(128) NOT NULL,
  `ProviderKey`         VARCHAR(128) NOT NULL,
  `ProviderDisplayName` LONGTEXT,
  `UserId`              VARCHAR(255) NOT NULL,
  PRIMARY KEY (`LoginProvider`, `ProviderKey`),
  KEY `IX_UserLogins_UserId` (`UserId`),
  CONSTRAINT `FK_UserLogins_Users`
    FOREIGN KEY (`UserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AspNetUserRoles` (
  `UserId` VARCHAR(255) NOT NULL,
  `RoleId` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`UserId`, `RoleId`),
  KEY `IX_UserRoles_RoleId` (`RoleId`),
  CONSTRAINT `FK_UserRoles_Users`
    FOREIGN KEY (`UserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE CASCADE,
  CONSTRAINT `FK_UserRoles_Roles`
    FOREIGN KEY (`RoleId`) REFERENCES `AspNetRoles`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AspNetUserTokens` (
  `UserId`        VARCHAR(255) NOT NULL,
  `LoginProvider` VARCHAR(128) NOT NULL,
  `Name`          VARCHAR(128) NOT NULL,
  `Value`         LONGTEXT,
  PRIMARY KEY (`UserId`, `LoginProvider`, `Name`),
  CONSTRAINT `FK_UserTokens_Users`
    FOREIGN KEY (`UserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- Optional seed
INSERT IGNORE INTO `AspNetRoles` (`Id`, `Name`, `NormalizedName`, `ConcurrencyStamp`)
VALUES ('role-admin', 'Admin', 'ADMIN', UUID());




-- ─────────────────────────────────────────────────────────────────────────────
-- Projects / Portfolio
-- ─────────────────────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `Projects` (
  `Id`          BIGINT NOT NULL AUTO_INCREMENT,
  `Slug`        VARCHAR(150) NOT NULL,
  `Title`       VARCHAR(200) NOT NULL,
  `Summary`     VARCHAR(500),
  `Description` LONGTEXT,
  `TechStack`   JSON NULL,
  `LiveUrl`     VARCHAR(500),
  `RepoUrl`     VARCHAR(500),
  `Featured`    TINYINT(1) NOT NULL DEFAULT 0,
  `Published`   TINYINT(1) NOT NULL DEFAULT 1,
  `OwnerUserId` VARCHAR(255) NULL,
  `CreatedAt`   DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`   DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`),
  UNIQUE KEY `UX_Projects_Slug` (`Slug`),
  KEY `IX_Projects_Published` (`Published`),
  KEY `IX_Projects_OwnerUserId` (`OwnerUserId`),
  CONSTRAINT `FK_Projects_Owner`
    FOREIGN KEY (`OwnerUserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE SET NULL
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `ProjectImages` (
  `Id`        BIGINT NOT NULL AUTO_INCREMENT,
  `ProjectId` BIGINT NOT NULL,
  `Url`       VARCHAR(500) NOT NULL,
  `Alt`       VARCHAR(200),
  `SortOrder` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`Id`),
  KEY `IX_ProjectImages_Project` (`ProjectId`),
  CONSTRAINT `FK_ProjectImages_Project`
    FOREIGN KEY (`ProjectId`) REFERENCES `Projects`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- ─────────────────────────────────────────────────────────────────────────────
-- Blog
-- ─────────────────────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `BlogPosts` (
  `Id`           BIGINT NOT NULL AUTO_INCREMENT,
  `Slug`         VARCHAR(150) NOT NULL,
  `Title`        VARCHAR(250) NOT NULL,
  `Excerpt`      VARCHAR(500),
  `Content`      LONGTEXT NOT NULL,
  `CoverImageUrl` VARCHAR(500),
  `Status`       ENUM('draft','published','archived') NOT NULL DEFAULT 'draft',
  `PublishedAt`  DATETIME(6) NULL,
  `AuthorUserId` VARCHAR(255) NULL,
  `CreatedAt`    DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`    DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`),
  UNIQUE KEY `UX_Blog_Slug` (`Slug`),
  KEY `IX_Blog_Status` (`Status`),
  KEY `IX_Blog_AuthorUserId` (`AuthorUserId`),
  CONSTRAINT `FK_Blog_Author`
    FOREIGN KEY (`AuthorUserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE SET NULL
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `BlogTags` (
  `Id`   BIGINT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(100) NOT NULL,
  `Slug` VARCHAR(120) NOT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `UX_BlogTags_Name` (`Name`),
  UNIQUE KEY `UX_BlogTags_Slug` (`Slug`)
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `BlogPostTags` (
  `BlogPostId` BIGINT NOT NULL,
  `BlogTagId`  BIGINT NOT NULL,
  PRIMARY KEY (`BlogPostId`, `BlogTagId`),
  KEY `IX_BlogPostTags_Tag` (`BlogTagId`),
  CONSTRAINT `FK_BlogPostTags_Post`
    FOREIGN KEY (`BlogPostId`) REFERENCES `BlogPosts`(`Id`) ON DELETE CASCADE,
  CONSTRAINT `FK_BlogPostTags_Tag`
    FOREIGN KEY (`BlogTagId`) REFERENCES `BlogTags`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- ─────────────────────────────────────────────────────────────────────────────
-- Fitness
-- ─────────────────────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `FitnessDaily` (
  `Id`           BIGINT NOT NULL AUTO_INCREMENT,
  `UserId`       VARCHAR(255) NOT NULL,
  `Day`          DATE NOT NULL,
  `CaloriesIn`   INT,
  `CaloriesOut`  INT,
  `Steps`        INT,
  `SleepMinutes` INT,
  `WeightKg`     DECIMAL(5,2),
  `Notes`        VARCHAR(500),
  `CreatedAt`    DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`    DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`),
  UNIQUE KEY `UX_FitnessDaily_User_Day` (`UserId`, `Day`),
  KEY `IX_FitnessDaily_UserId` (`UserId`),
  CONSTRAINT `FK_FitnessDaily_User`
    FOREIGN KEY (`UserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `ExerciseSessions` (
  `Id`             BIGINT NOT NULL AUTO_INCREMENT,
  `UserId`         VARCHAR(255) NOT NULL,
  `StartTime`      DATETIME(6) NOT NULL,
  `EndTime`        DATETIME(6) NULL,
  `Type`           ENUM('cardio','strength','mobility','other') NOT NULL,
  `CaloriesBurned` INT,
  `DistanceKm`     DECIMAL(6,2) NULL,
  `Notes`          VARCHAR(500),
  `CreatedAt`      DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`      DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`),
  KEY `IX_Exercise_User_Start` (`UserId`, `StartTime`),
  CONSTRAINT `FK_Exercise_User`
    FOREIGN KEY (`UserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- ─────────────────────────────────────────────────────────────────────────────
-- Contact / Business Inquiries
-- ─────────────────────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `ContactInquiries` (
  `Id`              BIGINT NOT NULL AUTO_INCREMENT,
  `Name`            VARCHAR(200),
  `Email`           VARCHAR(256) NOT NULL,
  `Phone`           VARCHAR(50),
  `Subject`         VARCHAR(200),
  `Message`         LONGTEXT NOT NULL,
  `Status`          ENUM('new','replied','closed') NOT NULL DEFAULT 'new',
  `CreatedAt`       DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`       DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  `HandledByUserId` VARCHAR(255) NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_Inquiries_Status` (`Status`),
  KEY `IX_Inquiries_Handler` (`HandledByUserId`),
  CONSTRAINT `FK_Inquiries_Handler`
    FOREIGN KEY (`HandledByUserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE SET NULL
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- ─────────────────────────────────────────────────────────────────────────────
-- Views
-- ─────────────────────────────────────────────────────────────────────────────
DROP VIEW IF EXISTS `v_user_is_admin`;
CREATE VIEW `v_user_is_admin` AS
SELECT
  u.`Id` AS `UserId`,
  EXISTS (
    SELECT 1
    FROM `AspNetUserRoles` ur
    JOIN `AspNetRoles` r ON r.`Id` = ur.`RoleId`
    WHERE ur.`UserId` = u.`Id` AND r.`NormalizedName` = 'ADMIN'
  ) AS `IsAdmin`
FROM `AspNetUsers` u;
-- ─────────────────────────────────────────────────────────────────────────────
-- Animations: Groups + Items
-- ─────────────────────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `AnimationGroups` (
  `Id`              BIGINT NOT NULL AUTO_INCREMENT,
  `Slug`            VARCHAR(150) NOT NULL,
  `Title`           VARCHAR(200) NOT NULL,
  `Description`     VARCHAR(1000) NULL,
  `TagsJson`        JSON NULL,
  `Published`       TINYINT(1) NOT NULL DEFAULT 0,
  `AuthorUserId`    VARCHAR(255) NULL,
  `CreatedAt`       DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `UpdatedAt`       DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`Id`),
  UNIQUE KEY `UX_AnimGroups_Slug` (`Slug`),
  KEY `IX_AnimGroups_Published` (`Published`),
  KEY `IX_AnimGroups_Author` (`AuthorUserId`),
  CONSTRAINT `FK_AnimGroups_Author`
    FOREIGN KEY (`AuthorUserId`) REFERENCES `AspNetUsers`(`Id`) ON DELETE SET NULL
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `AnimationGroupItems` (
  `Id`         BIGINT NOT NULL AUTO_INCREMENT,
  `GroupId`    BIGINT NOT NULL,
  `FileName`   VARCHAR(300) NOT NULL,  -- e.g. "Breakdance_Start.glb" (relative to ANIM_DIR)
  `Label`      VARCHAR(50) NULL,       -- e.g. "Start" | "Middle" | "End"
  `SortOrder`  INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`Id`),
  KEY `IX_AnimGroupItems_Group_Sort` (`GroupId`, `SortOrder`),
  CONSTRAINT `FK_AnimGroupItems_Group`
    FOREIGN KEY (`GroupId`) REFERENCES `AnimationGroups`(`Id`) ON DELETE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;
  
  ALTER TABLE `Projects`
  ADD COLUMN `Kind` ENUM('software','hardware') NOT NULL DEFAULT 'software',
  ADD INDEX `IX_Projects_Kind` (`Kind`);
  
  
  

-- params
SET @email := 'matic.ozimic@gmail.com';

-- find user by NormalizedEmail (Identity stores UPPER)
SET @uid := (
  SELECT Id
  FROM AspNetUsers
  WHERE NormalizedEmail COLLATE utf8mb4_unicode_ci
        = UPPER(CONVERT(@email USING utf8mb4)) COLLATE utf8mb4_unicode_ci
  LIMIT 1
);

-- if NULL, register first via POST /api/auth/register, then rerun this block
SELECT @uid AS UserId;

-- ensure Admin role exists (idempotent)
INSERT IGNORE INTO AspNetRoles (Id, Name, NormalizedName, ConcurrencyStamp)
SELECT 'role-admin', 'Admin', 'ADMIN', UUID()
WHERE NOT EXISTS (
  SELECT 1 FROM AspNetRoles
  WHERE NormalizedName COLLATE utf8mb4_unicode_ci = 'ADMIN'
);

-- get Admin role id
SET @rid := (
  SELECT Id FROM AspNetRoles
  WHERE NormalizedName COLLATE utf8mb4_unicode_ci = 'ADMIN'
  LIMIT 1
);

-- grant Admin to the user (idempotent)
INSERT IGNORE INTO AspNetUserRoles (UserId, RoleId)
SELECT @uid, @rid
FROM DUAL
WHERE @uid IS NOT NULL AND @rid IS NOT NULL;

-- verify
SELECT * FROM v_user_is_admin WHERE UserId = @uid;
